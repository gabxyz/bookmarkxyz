// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  refresh_token_expires_in Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String         @id @default(cuid())
  name          String?
  username      String?        @unique
  bio           String?
  twitterURL    String?
  githubURL     String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  bookmarkLists BookmarkList[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model BookmarkList {
  id              String     @id @default(cuid())
  listName        String
  listDescription String
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  authorId        String
  author          User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  bookmarks       Bookmark[]

  @@index([authorId])
}

model Bookmark {
  id             String       @id @default(cuid())
  title          String
  url            String
  bookmarkListId String
  bookmarkList   BookmarkList @relation(fields: [bookmarkListId], references: [id], onDelete: Cascade)

  @@index([bookmarkListId])
}
